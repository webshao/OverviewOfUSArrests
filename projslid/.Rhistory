library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors[57:68])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
actualDiag = adData[-inTrain,1]
actualDiag
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors[57:68])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
actualDiag = adData[-inTrain,1]
actualDiag
regModelFit <- train(diagnosis ~ ., method="glm", data=training)
regModelGuess <- predict(regModelFit, testing)
install.packages("e1071")
regModelFit <- train(diagnosis ~ ., method="glm", data=training)
regModelGuess <- predict(regModelFit, testing)
regModelGuess
table(regModelGuess, actualDiag)
sum(regModelGuess == actualDiag) / length(actualDiag)
preProc <- preProcess(training[,2:13], method="pca", thresh=0.8)
trainPC <- predict(preProc,training[,2:13])
pcaModelFit <- train(training[,1] ~ ., method="glm", data=trainPC)
pcaModelFit
pcaModelGuess <- predict(pcaModelFit, training[,2:13])
pcaModelGuess <- predict(pcaModelFit, trainPC)
pcaModelGuess
pcaModelGuess <- predict(pcaModelFit, trainPC)
table(pcaModelGuess, actualDiag)
pcaModelFit
length(pcaModelGuess)
length(trainPC)
length(actualDiag)
nrows(actualDiag)
nrow(actualDiag)
actualDiag
nrow(pcaModelGues)
nrow(pcaModelGuess)
length(pcaModelGuess)
class(pcaModelFit)
pcaModelFit$pred
preProc <- preProcess(training[,2:13], method="pca", thresh=0.8)
trainPC <- predict(preProc,training[,2:13])
pcaModelFit <- train(training[,1] ~ ., method="glm", data=trainPC)
pcaModelFit
library(kernlab); data(spam)
install.packages("kernlab")
library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(m > 0.6, arr.ind=T)
which(M > 0.6, arr.ind=T)
preProc <- preProcess(log10(training[,-58]+1),method = "pca", pcaComp = 2)
trainPC <- predict(preProc,log10(spam[-58,]+1))
modelFit <- train(training$type ~ ., method = "glm", data=trainPC)
preProc <- preProcess(log10(training[,-58]+1),method = "pca", pcaComp = 2)
trainPC <- predict(preProc,log10(spam[-58,]+1))
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method = "pca", pcaComp = 2)
trainPC <- predict(preProc,log10(spam[-58,]+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors[57:68])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
actualDiag = adData[-inTrain,1]
actualDiag
# As is
regModelFit <- train(diagnosis ~ ., method="glm", data=training)
regModelGuess <- predict(regModelFit, testing)
regModelGuess
table(regModelGuess, actualDiag)
sum(regModelGuess == actualDiag) / length(actualDiag)
preProc <- preProcess(training[,2:13], method="pca", thresh=0.8)
trainPC <- predict(preProc,training[,2:13])
trainPC
testPC <- predict(preProc,testing[,2:13])
testPC
pcaModelFit <- train(training[,1] ~ ., method="glm", data=trainPC)
pcaModelFit
pcaModelGuess <- predict(pcaModelFit, trainPC)
pcaModelGuess
preProc <- preProcess(training[,2:13], method="pca", thresh=0.8)
trainPC <- predict(preProc,training[,2:13])
testPC <- predict(preProc,testing[,2:13])
pcaModelFit <- train(testing[,1] ~ ., method="glm", data=testPC)
pcaModelFit
pcaModelGuess <- predict(pcaModelFit, testPC)
table(pcaModelGuess, actualDiag)
sum(pcaModelGuess == actualDiag) / length(actualDiag)
regModelFit <- train(diagnosis ~ ., method="glm", data=training)
regModelGuess <- predict(regModelFit, testing)
regModelGuess
table(regModelGuess, actualDiag)
sum(regModelGuess == actualDiag) / length(actualDiag)
regModelFit <- train(diagnosis ~ ., method="glm", data=training)
regModelGuess <- predict(regModelFit, testing)
regModelGuess
tabAsis <- table(regModelGuess, actualDiag)
confusionMatrix(tabAsis)
sum(regModelGuess == actualDiag) / length(actualDiag)
preProc <- preProcess(training[,2:13], method="pca", thresh=0.8)
trainPC <- predict(preProc,training[,2:13])
testPC <- predict(preProc,testing[,2:13])
pcaModelFit <- train(testing[,1] ~ ., method="glm", data=testPC)
pcaModelFit
pcaModelGuess <- predict(pcaModelFit, testPC)
tabPca <- table(pcaModelGuess, actualDiag)
confusionMatrix(tabPca)
sum(pcaModelGuess == actualDiag) / length(actualDiag)
names(predictors)
regModelFit <- train(diagnosis ~ ., method="glm", data=training)
regModelGuess <- predict(regModelFit, testing)
regModelGuess
tabAsis <- table(regModelGuess, actualDiag)
confusionMatrix(tabAsis)
sum(regModelGuess == actualDiag) / length(actualDiag)
trainingCsv <- "/home/wshao/school/coursera/predmachlearn-031/project/pml-training.csv"
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", trainingCsv)
rawTraining <- read.csv(trainingCsv)
testingCsv <- "/home/wshao/school/coursera/predmachlearn-031/project/pml-testing.csv"
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", testingCsv)
rawTesting <- read.csv(testingCsv)
set.seed(12345)
library(caret)
inA <- createDataPartition(rawTraining$X, p=0.6)
# Take out columns 1-7
training <- rawTraining[,8:160]
# Remove columns where there are all NAs
isnaTraining = as.data.frame(is.na(training))
sumIsnaTraining = apply(isnaTraining, 2, sum)
indIsnaTraining <- which(sumIsnaTraining == 0)
training <- training[,indIsnaTraining]
indNonfactorCol <- which((sapply(training, class) != 'factor'))
training <- training[,indNonfactorCol]
training$classe <- rawTraining$classe
testing <- rawTesting[,8:160]
testing <- testing[,indIsnaTraining]
testing <- testing[,indNonfactorCol]
testing$classe <- rawTesting$classe
ptrSet <- training[inA[[1]],]
cvlSet <- training[-inA[[1]],]
set.seed(23516)
ptm <- proc.time()
modelRf <- train(classe ~ ., data=ptrSet, method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE, allowParallel=TRUE)
predPtr = predict(modelRf, newdata = ptrSet)
predCvl = predict(modelRf, newdata = cvlSet)
rfAccuracy = sum(predRfCvl == cvlSet$classe) / nrow(cvlSet)
predRfPtr = predict(modelRf, newdata = ptrSet)
predRfCvl = predict(modelRf, newdata = cvlSet)
rfAccuracy = sum(predRfCvl == cvlSet$classe) / nrow(cvlSet)
rfOosError = 1 - rfAccuracy
predRfTesting = predict(modelRf, newdata = testing)
predRfTesting
control <- trainControl(method="repeatedcv", number=5, repeats=3)
ptm <- proc.time()
modelGbm <- train(classe ~., data=ptrSet, method="gbm",
trControl=control, verbose=FALSE)
predRfPtr = predict(modelRf, newdata = ptrSet)
predRfCvl = predict(modelRf, newdata = cvlSet)
rfAccuracy = sum(predRfCvl == cvlSet$classe) / nrow(cvlSet)
rfOosError = 1 - rfAccuracy
predGbmPtr = predict(modelGbm, newdata = ptrSet)
predGbmCvl = predict(modelGbm, newdata = cvlSet)
gbmAccuracy = sum(predGbmCvl == cvlSet$classe) / nrow(cvlSet)
gbmOosError = 1 - gbmAccuracy
predGbmTesting = predict(modelGbm, newdata = testing)
predGbmTesting
control <- trainControl(method="repeatedcv", number=10, repeats=3)
ptm <- proc.time()
modelGbm <- train(classe ~., data=ptrSet, method="gbm",
trControl=control, verbose=FALSE)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
ptm <- proc.time()
modelGbm <- train(classe ~., data=ptrSet, method="gbm",
trControl=control, verbose=FALSE)
timeGbm <- proc.time() - ptm
timeGbm
1656 / 60
predGbmPtr = predict(modelGbm, newdata = ptrSet)
predGbmCvl = predict(modelGbm, newdata = cvlSet)
gbmAccuracy = sum(predGbmCvl == cvlSet$classe) / nrow(cvlSet)
gbmOosError = 1 - gbmAccuracy
control <- trainControl(method="repeatedcv", number=5, repeats=3)
ptm <- proc.time()
modelGbm <- train(classe ~., data=ptrSet, method="gbm",
trControl=control, verbose=FALSE)
timeGbm <- proc.time() - ptm
timeGbm
predGbmPtr = predict(modelGbm, newdata = ptrSet)
predGbmCvl = predict(modelGbm, newdata = cvlSet)
gbmAccuracy = sum(predGbmCvl == cvlSet$classe) / nrow(cvlSet)
gbmOosError = 1 - gbmAccuracy
predGbmTesting = predict(modelGbm, newdata = testing)
predGbmTesting
trainingCsv <- "/home/wshao/school/coursera/predmachlearn-031/project/pml-training.csv"
#download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", trainingCsv)
rawTraining <- read.csv(trainingCsv)
testingCsv <- "/home/wshao/school/coursera/predmachlearn-031/project/pml-testing.csv"
#download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", testingCsv)
rawTesting <- read.csv(testingCsv)
# Take out columns 1-7
training <- rawTraining[,8:160]
# Remove columns where there are all NAs
isnaTraining = as.data.frame(is.na(training))
sumIsnaTraining = apply(isnaTraining, 2, sum)
indIsnaTraining <- which(sumIsnaTraining == 0)
training <- training[,indIsnaTraining]
indNonfactorCol <- which((sapply(training, class) != 'factor'))
training <- training[,indNonfactorCol]
training$classe <- rawTraining$classe
testing <- rawTesting[,8:160]
testing <- testing[,indIsnaTraining]
testing <- testing[,indNonfactorCol]
testing$classe <- rawTesting$classe
library(caret)
set.seed(12345)
inA <- createDataPartition(rawTraining$X, p=0.6)
ptrSet <- training[inA[[1]],]
cvlSet <- training[-inA[[1]],]
set.seed(23516)
ptm <- proc.time()
modelRf <- train(classe ~ ., data=ptrSet, method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE, allowParallel=TRUE)
timeRf <- proc.time() - ptm
timeRf
predRfPtr = predict(modelRf, newdata = ptrSet)
rfPtrAccuracy = sum(predRfPtr == ptrSet$classe) / nrow(ptrSet)
rfPtrError = 1 - rfPtrAccuracy
rfPtrError
predRfCvl = predict(modelRf, newdata = cvlSet)
rfCvlAccuracy = sum(predRfCvl == cvlSet$classe) / nrow(cvlSet)
rfCvlError = 1 - rfCvlAccuracy
rfCvlError
predRfTesting = predict(modelRf, newdata = testing)
predRfTesting
rfPtrAccuracy
ptm <- proc.time()
modelGbm <- train(classe ~., data=ptrSet, method="gbm",
trControl=trainControl(method="cv", number=5), verbose=FALSE)
timeGbm <- proc.time() - ptm
timeGbm
predGbmPtr = predict(modelGbm, newdata = ptrSet)
gbmPtrAccuracy = sum(predGbmPtr == ptrSet$classe) / nrow(ptrSet)
gbmPtrError = 1 - gbmPtrAccuracy
gbmPtrError
predGbmCvl = predict(modelGbm, newdata = cvlSet)
gbmCvlAccuracy = sum(predGbmCvl == cvlSet$classe) / nrow(cvlSet)
gbmCvlError = 1 - gbmCvlAccuracy
gbmCvlError
predGbmTesting = predict(modelGbm, newdata = testing)
predGbmTesting
install.packages("mlbench")
install.packages("mlearning")
library(mlearning)
conf <- confuse(predGbmCvl, cvlSet$classe)
conf <- confusion(predGbmCvl, cvlSet$classe)
source('~/school/coursera/predmachlearn-031/project/confuse.r')
source('~/school/coursera/predmachlearn-031/project/confuse.r')
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
mod1 <- train(CompressiveStrength ~ ., mod="lasso", data = training)
set.seed(233)
mod1 <- train(CompressiveStrength ~ ., mod="lasso", data = training)
pred1 <- predict(mod1, newdata=testing)
View(testing)
?plot.enet
library(elasticnet)
install.packages("elasticnet")
plot(mod1$finalModel)
class(mod1)
class(mod1$finalModel)
plot(mod1$finalModel, "lambda")
set.seed(233)
library(glmnet)
install.packages("glmnet")
mod1 <- train(CompressiveStrength ~ ., mod="lasso", data = training)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(glmnet)
mod1 <- train(CompressiveStrength ~ ., mod="lasso", data = training)
pred1 <- predict(mod1, newdata=testing)
library(elasticnet)
plot(mod1$finalModel, "lambda", label=TRUE)
class(mod1)
class(mod1$finalModel)
class(mod1$method)
plot.enet(mod1$finalModel, "lambda", label=TRUE)
plot.enet(mod1$finalModel, "penalty", label=TRUE)
training[3,1:8]
mod1 <- enet(training[,1:8], training$CompressiveStrength, lambda=0)
mod1 <- enet(matrix(training[,1:8]), training$CompressiveStrength, lambda=0)
mod1 <- enet(data.matrix(training[,1:8]), training$CompressiveStrength, lambda=0)
class(mod1)
class(mod1$finalModel)
plot(mod1, "lambda", label=TRUE)
plot(mod1, "penalty", label=TRUE)
plot(mod1, "fraction", label=TRUE)
plot(mod1, "penalty", label=TRUE)
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
library(forecast)
install.packages("forecast")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
library(forecast)
dat = read.csv("~/school/coursera/predmachlearn-031/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
ets1 <- ets(tstrain, model="MMM")
fit <- bats(tstrain)
ffit <- forecast(fit)
plot(ffit)
fit
library(devtools)
install.packages(devtools)
library(devtool)
install.packages(devtool)
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv/slidifyLibraries")
install_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv/slidifyLibraries")
install.packages("slidify")
library(slidify)
library(slidifyLibraries)
setwd("/home/wshao/school/coursera/devdataprod-032/")
ls
slidify("index.Rmd")
library(slidify)
author(test)
author("test")
author("projslid")
getwd()
setwd("/home/wshao/school/coursera/devdataprod-032")
author("projslid")
slidify("index.Rmd")
getwd()
slidify("index.Rmd")
library(knitr)
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
View(state.division)
View(data(state.division))
dataset(state.division)
library(state)
library(datasets)
View(state.division)
state.region
dataset(state.region)
data(state.region)
datasts(state.region)
datasets(state.region)
state.division
levels(state.division)
slidify("index.Rmd"); browseURL("index.html")
states
subset(state.division, state.division == 'Pacific')
subset(state.division, state.division)
state
datasets(state)
library(datasets)
data(state)
state.region
usa <- USArrests
usa$state.region <- state.region
usa
which(usa, state.region='West')
which(usa, state.region=='West')
which(usa$state.region=='West')
usa[which(usa$state.region=='West')]
usa[which(usa$state.region=='West'),]
usa$state.division <- state.division
usa[which(usa$state.division=='Pacific')]
library(plyr)
ddply(usa, .(state.division), sum)
ddply(usa, .(state.division), summarise, num=count(state.name))
ddply(usa, .(state.division), summarise, numb=count(state.name))
count(usa, vars="state.region")
count(usa, vars="state.division")
state[state.division=="Middle Atlantic"]
usa[usa$state.division=="Middle Atlantic"]
usa
usa[usa$state.division=="Middle Atlantic",]
usa$pop <- state.x77$Population
usa <- cbind(usa, as.data.frame(state.x77$Population))
usa$pop <- as.vector(state.x77$Population)
state.pop.k <- as.data.frame(state.x77)$Population
state.pop.wt <- state.pop.k / sum(state.pop.k)
# Get states and USArrests datasets and combine them column-wise
usa <- cbind(state.name = row.names(USArrests), USArrests[,c(1,2,4)],
state.pop.wt, state.pop.k, state.division, state.region)
usa
count(usa, "state.division")
usa[usa$state.division=="Middle Atlantic",]
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
swiss
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
7.4 + 6.3
(7.4 + 6.3 + 11.1) / 3
(6.85 + 11.1) / 2
(6.85 + 11.1) / 2
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
slidify("index.Rmd"); browseURL("index.html")
